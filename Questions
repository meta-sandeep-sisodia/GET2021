Testing and JUnit
Assignment 

Note : 
Please write proper specifications for all of the methods covered in this assignment.
Write both positive and negative test cases for these methods.
Write parameterized test cases wherever applicable.


Question

Design a class ArrOperation which should support following methods. Assume each method will receive an array of positive integers.

Return the size of the largest mirror section found in the input array.

Mirror section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example

maxMirror([1, 2, 3, 8, 9, 3, 2, 1]) → 3
maxMirror([7, 1, 4, 9, 7, 4, 1]) → 2
maxMirror([1, 2, 1, 4]) → 3
maxMirror*([1, 4, 5, 3, 5, 4, 1]) → 7

Throw assertion error in case the array is empty.

       2.   Return the number of clumps in the input array.

	Clump in an array is a series of 2 or more adjacent elements of the same value. For example
	
	countClumps([1, 2, 2, 3, 4, 4]) → 2
countClumps([1, 1, 2, 1, 1]) → 2
countClumps([1, 1, 1, 1, 1]) → 1

Throw assertion error in case the array is empty.

       3.   Solve fixXY problem

Return an array that contains exactly the same numbers as the input array, but rearranged so that every X is immediately followed by a Y. Do not move X within the array, but every other number may move. For ex: 

Let’s say the value of X is 4 and Y is 5. Then 
	
	fixXY([5, 4, 9, 4, 9, 5]) → [9, 4, 5, 4, 5, 9]
fixXY([1, 4, 1, 5]) → [1, 4, 5, 1]
fixXY([1, 4, 1, 5, 5, 4, 1]) → [1, 4, 5, 1, 1, 4, 5]
Assume we are receiving an array of integers along with values of X and Y as a method parameter.

Throw assertion in following cases : 
If array is empty
If there are unequal numbers of X and Y in the input array.
If two adjacents X values are there.
If X occurs at the last index of the array.

4.  splitArray

Return the index if there is a place to split the input array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side else return -1. For ex

splitArray([1, 1, 1, 2, 1]) → 3
splitArray([2, 1, 1, 2, 1]) → -1
splitArray([10, 10]) → 1

Throw assertion error in case the array is empty.


Add-on Exercise

Write Junit test cases for all the previous assignments done so far. 
Include both positive and negative test cases for each problem using JUnit concepts. 
Also use the concept of parameterized test cases wherever applicable.



        

Programming Fundamental
Assignment 6

Question 1

Design an immutable class for representing two-dimensional sparse matrices. Note that for space efficiency you should be storing only non zero elements of a matrix.

a) It should support following methods 
return transpose of the matrix
check whether it is a symmetrical matrix
add two matrices
multiply two matrices

b) What is the time complexity of each of the methods?

Things to keep in mind
Object should be immutable
Write junit test cases
Methods should be efficient


7- Inheritance and Composition
Assignment

Idea

Implement a Zoo Management System where all the animals will be allocated to zones based on their characteristics. 

Note that the focus of this problem is on design of related classes. It involves identifying classes, their attributes and methods, taking decision about where to implement/override methods, how to organise related objects into a structure etc. There may be multiple alternatives for design, each having its own advantages and disadvantages. 

Details

Create a hierarchy of animal where Animal is the base class and its subclasses could be various categories of animals like Mammal, Reptile, Bird, etc. Each of these classes can have further subclasses representing the specific types of animal like  Lion, Crocodile, Peacock, etc. 

The Zoo Management System will have multiple zones and each zone would support animals from a single category like mammal, reptile or bird. There could be multiple zones for the same category. Each zone will have cages for animals. Each zone has a limit on the number of cages that can be added to the zone. A zone could have additional attributes like hasPark, hasCanteen etc.

Each cage will specify the type of animals that can be added to the cage, and will have a limit on the number of animals that can be added to the cage.

When a new animal is added to the zoo, it will be allocated to an existing cage if there is available capacity. Otherwise a new cage will need to be added. 

Each animal will have a unique name, and will have attributes like age, weight etc. It will support methods like getSound() which returns a string representing the sound corresponding to that animal type, like for a lion it should return “roars”. 

Operations

a) A cage should specify a) the type of animals that can be added to it like tiger, and b) its capacity.

b) An animal can only be allocated to an existing cage based on available capacity. The system can allocate cage automatically.

c) Allow addition of one animal at a time, and if there is no capacity available then the operation should fail.

d) Each animal should be assigned a unique name, which is a string. Internal id can be assigned automatically.

e) Allow for death of an animal, where the animal will get removed from the zoo.

f) Provide the operation to add a cage to a zone.

g) Instead of asking methods to print/display, return values. UI is not part of this class

Data Structures - Session 1 - Assignments

A sub list is a part of list within a given window of positions named L and R, where L is the left position in list and R is the right position. Implement a linked list and write a method to rotate sub list in clockwise direction by the number of steps (N) given as input. For Example:
Given Linked list is 2->3->4->5->6->7 and L=2, R=5 and N=2
Sublist is 3->4->5->6
Rotating the sublinklist 3->4->5->6 with N=2 the result would be 5->6->3->4. So, our new linked list is 2->5->6->3->4->7.
As an output display the modified linked list.

Write a method to detect loop in linked list.

Can you visualise the representation of a multivariate polynomial using a nested list? Provide a function to find the degree of a multivariate polynomial.
	E.g. In this polynomial 3x2y4 - 5z2 + x - y + 20, the degree is 2+4 = 6
Data Structures - Session 2 - Assignments

Define the stack interface and use it to implement the method for evaluating an infix integer arithmetic expression. The method will take the infix expression as a string and tokenize it to extract the integers and operators. You can assume the expression has only integer constants, and the tokens are separated using spaces. The expression will support variables, arithmetic operators (+, -, *, /), relational operators (==, !=, &lt;, &gt;, &lt;=, &gt;=), and boolean operators (&amp;&amp;, ||, !), and parentheses. You can assume that arithmetic operators will not be used in unary form. Use the Java rules for precedence and associativity of operators.

Define the queue interface and implement it using an array. The queue would support methods to add an item to a queue, delete an item from the queue, check whether the queue is empty, check whether the queue is full. Address the issue related to queue getting full despite unused space in the array by providing circular implementation of the queue.

Using the queue interface, implement the counseling process of a College.
The program will receive a list of N programs that the college offers as input. The list will have the name and capacity of each program.
The program will also receive the list students sorted in order of rank. For each student it will have the name of the student, and list of 5 program options defining the preference of the student. The list will be sorted in order of preference.
The inputs in a) and b) will be provided as excel sheets.
Add the students to a queue in the received order.
Once the students have been added, process them one by one and allocate programs. If none of the options chosen by a student are available then he will not be allocated any program.
The program should output the list of students along with their allocated programs as an excel sheet.

Assignments on Data Structure #3
Trees and Graphs

Problem 1
You need to create a virtual Command Prompt (VCP) for managing virtual directories where a few operations/commands will be supported.
Proper messages should be shown for invalid commands and error during command execution. E.g. command does not exist, directory already exists etc.
Initially there should be a Root directory as the present working directory. Let’s say R:
Present working directory indicator should be shown during the prompt. E.g. R:\new\programs>

Command
Description
Example
mkdir
Create a new directory
mkdir New
cd
Change Directories
cd New
bk
Move to parent directory
back
ls
Display list of all folders in the current folder along with their date-time of creation. It also displays total subfolders (1st level only) present in the current directory.
list New
find
Find a folder in current or subfolders (recursively).
find New
tree
To display the complete directory structure
tree
exit
Exit the VCP
exit

Note -  Folders are not be actually created in the file system
For tree command use \u2514, \u251c, \u2500 and \u2502 unicode symbols.





Problem 2
Define the interface for priority queue, and implement it using an array.
Problem 3
Your cricket team is playing against Virat Kohli and you being the captain want Virat to score as low as possible. You know his strategy is to score max runs of the bowler who has minimum balls left to bowl. For instance if there are 2 bowlers with 5 and 7 balls left to bowl respectively then Virat will score max on bowler 1 than bowler 2. As an input you need to provide the total number of bowlers, the total number of balls Virat is going to play and the quota of each bowler. You need to tell the order of the bowler chosen by you as captain.
Note: There isn't any concept of 'Over' and none of the bowlers can get Virat out.

